# Init Oh-my-zsh and path vars
export ZSH="$HOME/.oh-my-zsh"
export PATH="$HOME/.local/bin:/usr/local/bin:/usr/local/sbin:$PATH"
export PATH="$HOME/langs/roc/:$PATH"
export PATH="$HOME/langs/zig/:$PATH"
export HELIX_RUNTIME="$HOME/.config/helix/runtime"
. "$HOME/.cargo/env"

# Creature comforts
ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="true"
HYPHEN_INSENSITIVE="true"

# fzf integration
source <(fzf --zsh)

# Init zsh plugins
fpath=(/usr/local/share/zsh-completions $fpath)
command -v brew &> /dev/null && FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
plugins=(direnv docker docker-compose fzf rust sbt scala ssh-agent zsh-autosuggestions zsh-syntax-highlighting)

# Fixes for plugins that dont want to work
source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
source "$ZSH/oh-my-zsh.sh"

# To help programs that read these
export VISUAL=hx
export EDITOR="$VISUAL"

# jenv
command -v jenv &> /dev/null && eval "$(jenv init -)"

# Cause i'm tried of googling it & typing it, some utilities to
# Diff two csvs column wise
# List orphaned local branches 'cause they were merged remotely
# List touched files by grep pattern
alias csvdiff='git diff --color-words="[^[:space:],]+"'
gitgone(){git branch -vv | grep "gone" | awk 'ORS=" " {print $1}';}
gittouch(){
  if [[ $# -gt 0 ]]; then
    git status -s --porcelain | grep "$1" | awk '$1 != "D" {printf "%s ", $2}'
  else
    git status -s --porcelain | awk '$1 != "D" {printf "%s ", $2}'
  fi
}

function template_or_fill_first() {
  # Github CLI will just error if the template doesn't exist, where-as I want it to dynamically
  # use the first commit or the template, preferring the template if set
  if [ -n "${GH_BRANCH_TEMPLATE}" ]; then
    full_path=".github/PULL_REQUEST_TEMPLATE/$GH_BRANCH_TEMPLATE"
    if [ -f "$full_path" ]; then
      # TODO: Would be nice to fill in the first commit in the template using SED and some marker?
      #  Would require hijacking the editor command for GH to edit the temp file it creates before
      #  opening the editor. Would also require finding the first commit of the branch (cherry? merge-base?)
      #  to then copy the body out of it. Doing this against master is easy, against another branch harder.
      echo "--template $GH_BRANCH_TEMPLATE"
      return
    fi
  fi
  echo "--fill-first"
}
function gm () {
    case $* in
    # Create a branch & add to machete
    'c '* ) shift 1; git switch -c "$GH_BRANCH_PFX$@" && git machete add ;;
    # TODO: 'ci' would be a nice command to open the gitlab pipes for the active branch
    # - Need to set the env var below
    # - Need to fetch current branch & sub in below
    # - Need to test
    # Goal post: `open {instance}/{prefixSlug}/-/pipelines?page=1&scope=all&ref={branch}`
    'ci' ) shift 1;  open "$GH_GITLAB_INSTANCE/`gh repo view --json nameWithOwner | jq '.nameWithOwner'`-/pipelines?page=1&scope=all&ref={branch}"/;;
    # Cleanup gone branches from the remote
    delete ) shift 1; git fetch --prune && git branch -D `git branch -vv | grep "gone" | awk 'ORS=" " {print $1}';` ;;
    # Add all tracked changes to the last commit without editing
    m ) ;&
    'm '* ) shift 1; git commit --amend --no-edit "$@" && git machete traverse --no-push --no-push-untracked -y --start-from=here --return-to=here ;;
    # TODO Move head of branch to another spot by selectively chosing where to place it
    move ) shift 1; echo 'todo' ;;
    # Interactive checkout of a branch
    switch ) shift 1; git branch -v --sort=-committerdate | fzf --layout=reverse-list --bind "enter:execute(git checkout {1})+accept-non-empty" ;;
    'switch '* ) shift 1;  git checkout "$1" ;;
    # Edit the contents of a PR
    'pr edit'* ) shift 2; gh pr edit "$@" ;;
    # Open active branch's PR
    pr ) ;&
    'pr '* ) shift 1; gh pr view --web "$@" ;;
    # Fetch & drop stale branches from start, update each in the tree. This will rebase on master too.
    # Mode 'exact' is needed to catch squash merges, as I found the 'simple' default did not.
    sync ) ;&
    'sync '* ) shift 1; git machete traverse -Wn --squash-merge-detection=exact "$@"; gm delete ;;
    # Push & Create or Update PR. If a PR already exists it won't be made again.
    # TODO: ... but if it already exists it also won't be pushed. Perhaps push then create? See if machete can help with this given it may or may not require a force-with-lease.
    s ) ;&
    's '* ) shift 1; gh pr create -e $(template_or_fill_first) "$@" ;;
    # Push all branches in the stack from the root; this does not create PRs to minimize impact.
    ss ) ;&
    'ss '* ) shift 1; git machete traverse -yw --return-to=here ;;
    # Default forward to machete
    * ) git machete "$@" ;;
    esac
}

pr-comments() {
 gh api graphql -f query='
  query($owner: String!, $repo: String!, $pr: Int!) {
    repository(owner: $owner, name: $repo) {
      pullRequest(number: $pr) {
        reviewThreads(first: 100) {
          nodes {
            isResolved
            path
            line
            comments(first: 100) {
              nodes {
                author {
                  login
                }
                body
                createdAt
              }
            }
          }
        }
      }
    }
  }
' -f owner=$(gh repo view --json owner -q .owner.login) \
  -f repo=$(gh repo view --json name -q .name) \
  -F pr=$(gh pr view --json number -q .number) \
  | jq '[.data.repository.pullRequest.reviewThreads.nodes[] | select(.isResolved == false)]'
}

# Aliases because some of these commands are just too easy to forget
alias mvn="mvn -T 4 -ntp"
alias kc="kubectl"
alias kn="kubens"
alias kx="kubectx"
alias ssh="kitty +kitten ssh -A"

# For writing long commands, open a text editor.
# Now since you use zsh this is a .zsh file so if your editor has
# an LSP for this file enabled you also get some help
alias pipr="edit-command-line"

alias spt="spotify_player"

# Load any extensions we have for this computer in the config
# directory (like werk stuff)
for conf in "$HOME/.config/zsh/"*.zsh; do
  source "${conf}"
done
unset conf

# Load linux specifics
if uname | grep -i linux &> /dev/null; then
  alias open='xdg-open'
  alias pbcopy='wl-copy'
  alias pbpaste='wl-paste'
fi

# Final inits. Note we -A SSH so identity is forwarded to remote server
command -v fnm &> /dev/null && eval "$(fnm env --use-on-cd --shell zsh)"
eval "$(starship init zsh)"

# Tab Completions
source <(jj util completion zsh)

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniforge/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
